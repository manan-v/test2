{"sha": "8159c946e5aa882de9b69b20e909dfd89fab5706", "node_id": "MDY6Q29tbWl0NTk4MzM0NDo4MTU5Yzk0NmU1YWE4ODJkZTliNjliMjBlOTA5ZGZkODlmYWI1NzA2", "commit": {"author": {"name": "Shane Harvey", "email": "shane.harvey@mongodb.com", "date": "2018-08-09T21:51:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-08-09T21:51:41Z"}, "message": "Fix shutdown logic (#253)\n\nDon't wait forever for the server to shutdown.\r\nRetry the shutdown command once.", "tree": {"sha": "1ab2136af45b8dadd441bd17fe48d10c965f058c", "url": "https://api.github.com/repos/10gen/mongo-orchestration/git/trees/1ab2136af45b8dadd441bd17fe48d10c965f058c"}, "url": "https://api.github.com/repos/10gen/mongo-orchestration/git/commits/8159c946e5aa882de9b69b20e909dfd89fab5706", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbbLdtCRBK7hj4Ov3rIwAAdHIIAC0MlgGxSeqRoJzdJG7uScaC\nvZnNeOC8CoRcV3ykcA6gqLneDzlsFV/3XEyjAzdPxys5hwrKp4Wq0ntgLK0AYqK0\nylESoGxI8sqXKF8xxAP9JRaB6dHt3k5CxixoEE0GPKHgGeTrJDDTgwWDjgz9B/5d\nISeuwznGme5uiamUvYhk9IbbCD4haxg0cp3paYDbDmvtYXkbs5rz4Q+hm4sJYgmb\nRf9pB+dHtSpqymRBq3rnF3WjIkuHizRouyIToTAvUkLGtqs+6HMHz8Du5uF/yuid\nCab8eqXTNTxAfuik7htjUiHcdnmf1AmNLdx6P3N1Y4LgZTVZ4x6BFG4M0xQNkp8=\n=MG01\n-----END PGP SIGNATURE-----\n", "payload": "tree 1ab2136af45b8dadd441bd17fe48d10c965f058c\nparent 299939b3a1672753643888e956c2b30cd049a014\nauthor Shane Harvey <shane.harvey@mongodb.com> 1533851501 -0700\ncommitter GitHub <noreply@github.com> 1533851501 -0700\n\nFix shutdown logic (#253)\n\nDon't wait forever for the server to shutdown.\r\nRetry the shutdown command once."}}, "url": "https://api.github.com/repos/10gen/mongo-orchestration/commits/8159c946e5aa882de9b69b20e909dfd89fab5706", "html_url": "https://github.com/10gen/mongo-orchestration/commit/8159c946e5aa882de9b69b20e909dfd89fab5706", "comments_url": "https://api.github.com/repos/10gen/mongo-orchestration/commits/8159c946e5aa882de9b69b20e909dfd89fab5706/comments", "author": {"login": "ShaneHarvey", "id": 5015933, "node_id": "MDQ6VXNlcjUwMTU5MzM=", "avatar_url": "https://avatars.githubusercontent.com/u/5015933?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ShaneHarvey", "html_url": "https://github.com/ShaneHarvey", "followers_url": "https://api.github.com/users/ShaneHarvey/followers", "following_url": "https://api.github.com/users/ShaneHarvey/following{/other_user}", "gists_url": "https://api.github.com/users/ShaneHarvey/gists{/gist_id}", "starred_url": "https://api.github.com/users/ShaneHarvey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ShaneHarvey/subscriptions", "organizations_url": "https://api.github.com/users/ShaneHarvey/orgs", "repos_url": "https://api.github.com/users/ShaneHarvey/repos", "events_url": "https://api.github.com/users/ShaneHarvey/events{/privacy}", "received_events_url": "https://api.github.com/users/ShaneHarvey/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "299939b3a1672753643888e956c2b30cd049a014", "url": "https://api.github.com/repos/10gen/mongo-orchestration/commits/299939b3a1672753643888e956c2b30cd049a014", "html_url": "https://github.com/10gen/mongo-orchestration/commit/299939b3a1672753643888e956c2b30cd049a014"}], "stats": {"total": 59, "additions": 50, "deletions": 9}, "files": [{"sha": "5cbbb532c653d12c5a2d5d453b7f95a4cb5fce19", "filename": "mongo_orchestration/process.py", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/10gen/mongo-orchestration/blob/8159c946e5aa882de9b69b20e909dfd89fab5706/mongo_orchestration%2Fprocess.py", "raw_url": "https://github.com/10gen/mongo-orchestration/raw/8159c946e5aa882de9b69b20e909dfd89fab5706/mongo_orchestration%2Fprocess.py", "contents_url": "https://api.github.com/repos/10gen/mongo-orchestration/contents/mongo_orchestration%2Fprocess.py?ref=8159c946e5aa882de9b69b20e909dfd89fab5706", "patch": "@@ -34,7 +34,7 @@\n from bottle import request\n \n from mongo_orchestration.common import DEFAULT_BIND\n-from mongo_orchestration.compat import reraise\n+from mongo_orchestration.compat import reraise, PY3\n from mongo_orchestration.errors import TimeoutError, RequestError\n from mongo_orchestration.singleton import Singleton\n \n@@ -237,6 +237,29 @@ def mprocess(name, config_path, port=None, timeout=180, silence_stdout=True):\n     return (proc, host)\n \n \n+def wait_mprocess(process, timeout):\n+    \"\"\"Compatibility function for waiting on a process with a timeout.\n+\n+    Raises TimeoutError when the timeout is reached.\n+    \"\"\"\n+    if PY3:\n+        try:\n+            return process.wait(timeout=timeout)\n+        except subprocess.TimeoutExpired as exc:\n+            raise TimeoutError(str(exc))\n+\n+    # On Python 2, simulate the timeout parameter and raise TimeoutError.\n+    start = time.time()\n+    while True:\n+        exit_code = process.poll()\n+        if exit_code is not None:\n+            return exit_code\n+        if time.time() - start > timeout:\n+            raise TimeoutError(\"Process %s timed out after %s seconds\" %\n+                               (process.pid, timeout))\n+        time.sleep(0.05)\n+\n+\n def kill_mprocess(process):\n     \"\"\"kill process\n     Args:"}, {"sha": "f2e649fb572208794ad2a6b65cbe22be123c1263", "filename": "mongo_orchestration/servers.py", "status": "modified", "additions": 26, "deletions": 8, "changes": 34, "blob_url": "https://github.com/10gen/mongo-orchestration/blob/8159c946e5aa882de9b69b20e909dfd89fab5706/mongo_orchestration%2Fservers.py", "raw_url": "https://github.com/10gen/mongo-orchestration/raw/8159c946e5aa882de9b69b20e909dfd89fab5706/mongo_orchestration%2Fservers.py", "contents_url": "https://api.github.com/repos/10gen/mongo-orchestration/contents/mongo_orchestration%2Fservers.py?ref=8159c946e5aa882de9b69b20e909dfd89fab5706", "patch": "@@ -391,20 +391,38 @@ def start(self, timeout=300):\n \n     def shutdown(self):\n         \"\"\"Send shutdown command and wait for the process to exit.\"\"\"\n-        logger.info(\"Attempting to send shutdown command to %s\", self.name)\n+        # Return early if this server has already exited.\n+        if not process.proc_alive(self.proc):\n+            return\n+        logger.info(\"Attempting to connect to %s\", self.hostname)\n         client = self.connection\n-        try:\n-            client.admin.command(\"shutdown\", force=True)\n-        except ConnectionFailure as exc:\n-            # shutdown succeeds by closing the connection.\n-            pass\n-        self.proc.wait()\n+        # Attempt the shutdown command twice, the first attempt might fail due\n+        # to an election.\n+        attempts = 2\n+        for i in range(attempts):\n+            logger.info(\"Attempting to send shutdown command to %s\",\n+                        self.hostname)\n+            try:\n+                client.admin.command(\"shutdown\", force=True)\n+            except ConnectionFailure:\n+                # A shutdown succeeds by closing the connection but a\n+                # connection error does not necessarily mean that the shutdown\n+                # has succeeded.\n+                pass\n+            # Wait for the server to exit otherwise rerun the shutdown command.\n+            try:\n+                return process.wait_mprocess(self.proc, 5)\n+            except TimeoutError as exc:\n+                logger.info(\"Timed out waiting on process: %s\", exc)\n+                continue\n+        raise ServersError(\"Server %s failed to shutdown after %s attempts\" %\n+                           (self.hostname, attempts))\n \n     def stop(self):\n         \"\"\"stop server\"\"\"\n         try:\n             self.shutdown()\n-        except PyMongoError as exc:\n+        except (PyMongoError, ServersError) as exc:\n             logger.info(\"Killing %s with signal, shutdown command failed: %r\",\n                         self.name, exc)\n             return process.kill_mprocess(self.proc)"}]}